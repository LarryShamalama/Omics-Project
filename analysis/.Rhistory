geom_histogram(binwidth=0.1, color='orange') +
labs(x='Average MSE',
y='Frequency') +
ggtitle(paste('Histogram of average MSE \nacross', num.reps, 'cross-validations'))
ggplot(data.frame(x.val), aes(x=x.val)) +
geom_histogram(binwidth=0.1, color='orange') +
labs(x='Average MSE',
y='Frequency') +
ggtitle(paste('Histogram of average MSE \nacross', num.reps, 'cross-validations')) +
theme(plot.title = element_text(hjust=0.5))
ggplot(data.frame(x.val), aes(x=x.val)) +
geom_histogram(binwidth=0.1, color='orange', fill='white') +
labs(x='Average MSE',
y='Frequency') +
ggtitle(paste('Histogram of average MSE \nacross', num.reps, 'cross-validations')) +
theme(plot.title = element_text(hjust=0.5))
ggplot(data.frame(x.val), aes(x=x.val)) +
geom_histogram(binwidth=0.1, color='red', fill='orange') +
labs(x='Average MSE',
y='Frequency') +
ggtitle(paste('Histogram of average MSE \nacross', num.reps, 'cross-validations')) +
theme(plot.title = element_text(hjust=0.5))
source('~/Documents/Digital Public Health/Machine Learning/rf.R', echo=TRUE)
f <- function(est.type){
stopifnot(est.type %in% c(0, 1, 2))
# 0 refers to q-learning
# 1 refers to g-estimation
# 2 refers to dwols
temp.data <- create.data(num.patients)
Y <- temp.data[,1]
A <- temp.data[,2]
X <- temp.data[,3]
Ahat.inc <- as.vector(fitted(glm(A ~ 1, family=binomial)))
Ahat.cor <- as.vector(fitted(glm(A ~ X, family=binomial)))
x.beta.inc <- cbind(1, X)
x.beta.cor <- cbind(1, exp(X), X^3)
x.psi <- cbind(1, X)
# both incorrect
psi.model1   <- est.func(A, Ahat.inc, x.beta.inc, x.psi, Y)
# treatment model incorrect
psi.model2   <- est.func(A, Ahat.inc, x.beta.cor, x.psi, Y)
# outcome model incorrect
psi.model3   <- est.func(A, Ahat.cor, x.beta.inc, x.psi, Y)
# both models correct
psi.model4   <- est.func(A, Ahat.cor, x.beta.cor, x.psi, Y)
return (rbind(psi.model1,
psi.model2,
psi.model3,
psi.model4))
}
s <- 1:10
s
s[c(-1)]
tail(s, n=1)
tail(s)
tail(s, n=1)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
```{r cars}
summary(cars)
cat(i)
plot(pressure)
a <- -4
for     (i in 1:2){
cat(i)
}
a <- -4
for     (i in 1:2){
cat(i)
}
geo.data <- source('~/Documents/Digital Public Health/Omics/SinghaniaTB_data.Rdata')
load("/Users/shamalama/Downloads/SinghaniaTB_data.Rdata")
geo.data <- laod('~/Documents/Digital Public Health/Omics/SinghaniaTB_data.Rdata')
geo.data <- load('~/Documents/Digital Public Health/Omics/SinghaniaTB_data.Rdata')
geo.data
geo.data['expr_singhania_raw']
geo.data$expr_singhania_raw
expr_singhania_raw
expr_singhania_raw
head(expr_singhania_raw)
expr_singhania_raw$Berry_London_Sample1
dim(expr_singhania_raw)
row, col <- dim(expr_singhania_raw)
nrows <- dim(expr_singhania_raw)[1]
ncols <- dim(expr_singhania_raw)[2]
expr_singhania_raw[,3:ncols]
expr_singhania_raw[,4:ncols]
rowSums(expr_singhania_raw[,4:ncols])
expr_singhania_raw$Genes
rowSums(expr_singhania_raw[,4:ncols]) != 0
rowSums(expr_singhania_raw[,4:ncols]) == 0
sum(rowSums(expr_singhania_raw[,4:ncols]) == 0)
cat('Percentage of genes that are never observed is ', sum.genes/nrows)
sum.genes <- rowSums(expr_singhania_raw[,4:ncols])
cat('Percentage of genes that are never observed is ', sum(sum.genes == 0)/nrows)
cat('Percentage of genes that are never observed is ', sum(sum.genes == 0)*100/nrows, '%')
a <- matrix(c(1, 2, 3, 4), nrows=2)
a <- matrix(c(1, 2, 3, 4), nrow=2)
a
a <- matrix(1:14, nrows=2)
a <- matrix(1:14, nrow=2)
a
a[,c(3, 4)]
d
cat('Percentage of genes that are never observed is ', round(sum(sum.genes == 0)*100/nrows, 2), '%')
cat('Percentage of genes that are never observed is ', round(sum(sum.genes == 0)*100/nrows, 3), '%')
cat('Percentage of genes that are never observed is ', round(sum(sum.genes == 0)*100/nrows, 1), '%')
filtered.data <- expr_singhania_raw[sum.genes == 0,]
filtered.data
?filter
dim(filtered.data)
filtered.data <- expr_singhania_raw[sum.genes != 0,]
dim(filtered.data)
filter(expr_singhania_raw, sum.genes == 0)
gene_no0 <- rowSums(dplyr::select(expr_singhania_raw, -dplyr::starts_with('Gene')))>0
library(dplyr)
install.packages('dplyr')
install.packages('DTRreg')
library(dplyr)
gene_no0 <- rowSums(dplyr::select(expr_singhania_raw, -dplyr::starts_with('Gene')))>0
gene_no0
-dplyr::starts_with('Gene'))
-dplyr::starts_with('Gene')
dplyr::starts_with('Gene')
expr_singhania_raw_no0 <- dplyr::filter(expr_singhania_raw, gene_no0)
expr_singhania_raw_no0
rm(list=ls())
nrows <- dim(expr_singhania_raw)[1]
load('~/Documents/Digital Public Health/Omics/SinghaniaTB_data.Rdata')
head(expr_singhania_raw)
nrows <- dim(expr_singhania_raw)[1]
ncols <- dim(expr_singhania_raw)[2]
sum.genes <- rowSums(expr_singhania_raw[,4:ncols])
cat('Percentage of genes that are never observed is ', round(sum(sum.genes == 0)*100/nrows, 1), '%')
filtered.data <- expr_singhania_raw[sum.genes != 0,]
dim(expr_singhania_raw_no0)
expr_singhania_raw_no0 <- dplyr::filter(expr_singhania_raw, gene_no0)
dim(expr_singhania_raw_no0)
gene_no0 <- rowSums(dplyr::select(expr_singhania_raw, -dplyr::starts_with('Gene')))>0
dim(expr_singhania_raw_no0)
expr_singhania_raw_no0 <- dplyr::filter(expr_singhania_raw, gene_no0)
dim(expr_singhania_raw_no0)
dim(filtered.data)
cpm
1e5
cpm <- function(x){
return (x*(10^6)/sum(x))
}
expr_singhania_raw_no0_cpm2p <- dplyr::filter(expr_singhania_raw_no0, rowSums(cpm>2)>5)
mycpmfun <- function(x){
return (x*(10^6)/sum(x))
}
cpm <- apply(select(expr_singhania_raw_no0, -starts_with('Gene')),
MARGIN = 2, FUN = mycpmfun)
expr_singhania_raw_no0_cpm2p <- dplyr::filter(expr_singhania_raw_no0, rowSums(cpm>2)>5)
dim(expr_singhania_raw_no0_cpm2p)
expr_singhania_raw_no0_cpm2p$Gene_biotype
expr_singhania_raw_no0_cpm2p$Gene_biotype == 'protein_coding'
expr_singhania_raw_no0_cpm2p_prot <- expr_singhania_raw_no0_cpm2p[expr_singhania_raw_no0_cpm2p$Gene_biotype == 'protein_coding',]
dim(expr_singhania_raw_no0_cpm2p_prot)
?log
log(expr_singhania_raw_no0_cpm2p_prot)
expr_singhania_raw_no0_cpm2p_prot
expr_singhania_raw_no0_cpm2p_prot[,4:]
expr_singhania_raw_no0_cpm2p_prot[,4:ncols]
log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2)
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2))
warnings()
infos_singhania
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2)
col=as.character(bp_col),
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
dev.off()
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
box()
plot()
plot(c(1, 2), c(4, 5))
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
box()
rm(list=ls())
library(dplyr)
load('~/Documents/Digital Public Health/Omics/SinghaniaTB_data.Rdata')
head(expr_singhania_raw)
nrows <- dim(expr_singhania_raw)[1]
ncols <- dim(expr_singhania_raw)[2]
sum.genes <- rowSums(expr_singhania_raw[,4:ncols])
cat('Percentage of genes that are never observed is ', round(sum(sum.genes == 0)*100/nrows, 1), '%')
filtered.data <- expr_singhania_raw[sum.genes != 0,]
dim(filtered.data)
gene_no0 <- rowSums(dplyr::select(expr_singhania_raw, -dplyr::starts_with('Gene')))>0
expr_singhania_raw_no0 <- dplyr::filter(expr_singhania_raw, gene_no0)
dim(expr_singhania_raw_no0)
mycpmfun <- function(x){
return (x*(10^6)/sum(x))
}
cpm <- apply(select(expr_singhania_raw_no0, -starts_with('Gene')),
MARGIN = 2, FUN = mycpmfun)
expr_singhania_raw_no0_cpm2p <- dplyr::filter(expr_singhania_raw_no0, rowSums(cpm>2)>5)
dim(expr_singhania_raw_no0_cpm2p)
expr_singhania_raw_no0_cpm2p_prot <- expr_singhania_raw_no0_cpm2p[expr_singhania_raw_no0_cpm2p$Gene_biotype == 'protein_coding',]
dim(expr_singhania_raw_no0_cpm2p_prot)
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
box()
legend
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
box()
legend
bp_col <- infos_singhania$Location
levels(bp_col) <- c('blue2', 'gold', 'green2')
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
box()
legend
legend('topright',
c('London', 'South Africa', 'Leicester'),
col=c('blue2', 'gold', 'green2'),
pch=15,
horiz=TRUE, bg=NA)
boxplot(log(expr_singhania_raw_no0_cpm2p_prot[,4:ncols], base=2),
col=as.character(bp_col),
xlab='Samples',
ylab='log2(raw counts)',
axes=FALSE)
warnings()
singhaniaDGE <-DGEList(counts=select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene')),
samples=infos_singhania,
)
singhaniaDGE <-DGEList(counts=select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene')),
samples=infos_singhania,
)
BiocManager::install("edgeR")
BiocManager::install("edger")
install.packages('edgeR')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
deucl_raw <- dist(t(select(expr_singhania_raw_no0_cpm2p_prot, -start_with('Gene'))))
deucl_raw <- dist(t(select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene'))))
?model.matrix
edgeR::estimateCommonDisp()
?edgeR::estimateCommonDisp()
singhaniaDGE <-DGEList(counts=select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene')),
samples=infos_singhania,
)
expr_singhania_raw_no0_cpm2p_prot
expr_singhania_raw_no0_cpm2p_prot$Gene_biotype
expr_singhania_raw_no0_cpm2p_prot
expr_singhania_raw_no0_cpm2p_prot$Berry_London_Sample41
expr_singhania_raw_no0_cpm2p_prot$Status
BiocManager::install("edgeR")
library(edgeR)
singhaniaDGE <- DGEList(counts=select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene')),
samples=infos_singhania,
)
deucl_raw <- dist(t(select(expr_singhania_raw_no0_cpm2p_prot, -starts_with('Gene'))))
deucl_raw
dim(deucl_raw)
attributes(deucl_raw)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
cat("\014")
library(rstudioapi)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
transcriptome <- read.csv("../filter-data/transcriptome.csv")
all_samples <- read.csv("../filter-data/all.csv")
Trascrip <- data.frame(transcriptome[,-1], location = all_samples$lesional)
TranscripNorm <- PCA(Trascrip, quali.sup = which(names(Trascrip) == "location"))
library(FactoMineR)
TranscripNorm <- PCA(Trascrip, quali.sup = which(names(Trascrip) == "location"))
TranscripNorm <- PCA(Trascrip, quali.sup = which(names(Trascrip) == "location"))
plot(TranscripNorm, choix = "ind", label = "none", habillage = which(names(Trascrip) == "location"))
plot(TranscripNo
l
plot(TranscripNorm, choix = "var", label = "none")
dev.off()
plot(TranscripNorm, choix = "var", label = "none")
#  Gene Differentiation
#  L.Dong and K.Creel
#  24-10-2019
# clear the environment
rm(list=ls())
# clear the console
cat('\014')
# load libraries
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(rstudioapi)
library(limma)
library(data.table)
# read in sample information, keeping those that are AD
samples <- read.csv('../filter-data/all.csv')
samples <- subset(samples, samples$clinical_group == 'AD')
# read in transcriptome data, change row names and remove the var 'X'
transcriptome <- read.csv('../filter-data/transcriptome.csv') # takes time to load
rownames(transcriptome) <- transcriptome$X
transcriptome <- transcriptome[,-c(1)]
# keep the transcriptomes that are AD
transcriptome <- transcriptome[rownames(transcriptome) %in% samples$sample_id,]
# create an index, matching the sample_id to the row in the transcriptome
indices <- match(samples$sample_id, rownames(transcriptome))
# stop the process if there's any lines that have NA (sample_id has not matching transcriptome)
stopifnot(sum(is.na(indices)) == 0)
# order the transcriptome data according to the vector
transcriptome <- transcriptome[indices,]
# stop if not every row matches a sample_id
stopifnot(all(rownames(transcriptome) == samples$sample_id))
# transpose transcriptome data
transcriptome <- t(transcriptome)
#lesion <- 2-as.integer(samples$lesional)
samples$lesional_new[samples$lesional=="LES"]<- 1
samples$lesional_new[samples$lesional=="NON_LES"]<- 0
library(gdata)
# create the model matrix for paired data
#   drop the unused dummy variables with drop.levels
paired.design<- as.data.frame(model.matrix(~lesional_new + drop.levels(MAARS_identifier), data=samples))
# fitting linear model
fit <- lmFit(transcriptome, design=paired.design)
# squeezes genewise residual variance towards a common value
fit <- eBayes(fit, robust=TRUE)
# significance tests - identify which genes are differentially expressed
signif <- decideTests(fit, adjust.method = "BH", p.value = 0.05, lfc = 1)
summary(signif)[ ,2]
# extract genes p-values
#  NOTE:  code is giving ONLY the significant genes
top.table <- topTable(fit, adjust.method="BH", p.value = 0.05, lfc = 1, sort.by = "P", n=Inf, coef=2)
#gene_pvalues_all<- top.table[ ,(ncol(top.table)-3):ncol(top.table)]
#gene_pvalues_sig<- gene_pvalues_all[which(gene_pvalues_all$adj.P.Val<.05), ]
gene_pvalues_sig<- top.table[ ,(ncol(top.table)-3):ncol(top.table)]
# Arul's code:
topTable(BayesFit, adjust.method = "BH")
test<- topTable(fit, adjust.method = "BH", n=Inf)
test2<- test[ ,(ncol(test)-3):ncol(test)]
names(test)
summary(test)
paired.design
signif
summary(signif)[,c(1, 2)]
signif[,1]
signif[,2]
signif[,3]
dim(signif)
attributes(signif)
signif$labels$Up
signif$labels
signif$levels
attributes(signif)
signif$levels
signif['levels']
?decideTests
top.table
top.table$logFC
top.table$logFC > 0
sum(top.table$logFC > 0)
top.table[top.table$logFC > 0]
top.table[top.table$logFC > 0,]
dim(top.table[top.table$logFC > 0,])
rownames(top.table[top.table$logFC > 0,])
rownames(top.table[top.table$logFC < 0,])
substr(rownames(top.table[top.table$logFC < 0,]), 1, nchar('ENSG00000184210_at') - 3)
a <- substr(rownames(top.table[top.table$logFC < 0,]), 1, nchar('ENSG00000184210_at') - 3)
'ENSG00000186832' %in% ENSG00000186832
c('ENSG00000186832') %in% ENSG00000186832
list('ENSG00000186832') %in% ENSG00000186832
list("ENSG00000186832") %in% ENSG00000186832
c?
d
ss
?c
top.table2 <- topTable(fit, adjust.method="BH", p.value = 1, lfc = 0, sort.by = "P", n=Inf, coef=2)
top.table2
dim(top.table2)
names(top.table2)
# plotting histograms
ggplot(top.table2, aes(x=P.Value)) +
geom_histogram()
# plotting histograms
library(ggplot2)
ggplot(top.table2, aes(x=P.Value)) +
geom_histogram()
ggplot(top.table2, aes(x=P.Value)) +
geom_histogram(fill='white')
ggplot(top.table2, aes(x=P.Value, color='red')) +
geom_histogram(fill='white')
ggplot(top.table2, aes(x=P.Value, color='red')) +
geom_histogram(fill='red')
ggplot(top.table2, aes(x=P.Value, color='red')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=P.Value, color='red')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=adj.P.Val, color='purple')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=P.Value, color='red')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=adj.P.Val, color='purple')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
top.table2$adj.P.Val
top.table2$adj.P.Val > top.table2$P.Value
ggplot(top.table2, aes(x=log(P.Value), color='red')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=log(adj.P.Val), color='purple')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=log(P.Value), color='red')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=log(adj.P.Val), color='purple')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=log(P.Value), color='black')) +
geom_histogram(fill='red', alpha=0.5)
ggplot(top.table2, aes(x=log(adj.P.Val), color='black')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
top.table2
c(top.table2$P.Value, top.table2$adj.P.Val)
length(top.table2$P.Value)
c(top.table2$P.Value, top.table2$adj.P.Val)
)
rep(1, 32633)
rep(rep(1, 32633), rep(0, 32633))
df <- cbind(c(top.table2$P.Value, top.table2$adj.P.Val), c(rep(1, 32633), rep(0, 32633)))
df
colnames(df) <- c('p-value', 'cat')
ggplot(top.table2, aes(x=p-value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
df <- cbind(c(top.table2$P.Value, top.table2$adj.P.Val), c(rep(1, 32633), rep(0, 32633)))
colnames(df) <- c('p-value', 'cat')
ggplot(top.table2, aes(x=p-value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
colnames(df) <- c('p_value', 'cat')
ggplot(top.table2, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
ggplot(df, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
df <- data.frame(cbind(c(top.table2$P.Value, top.table2$adj.P.Val), c(rep(1, 32633), rep(0, 32633))))
colnames(df) <- c('p_value', 'cat')
ggplot(df, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
ggplot(df, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5)
attributes(top.table2)
ggplot(df, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
ggplot(top.table, aes(x=P,Value)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
names(top.table)
ggplot(top.table, aes(x=P.Value)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
ggplot(top.table, aes(x=P.Value)) +
geom_histogram(fill='red', alpha=0.5)
top.table$P.Value
top.table$adj.P.Val
top.table2 <- topTable(fit, adjust.method="BH", p.value = 1, lfc = 0, sort.by = "P", n=Inf, coef=2)
length(top.table2$P.Value)
ggplot(top.table2, aes(x=P.Value)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=log(adj.P.Val), color='black')) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=P.Value)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
ggplot(top.table2, aes(x=log(adj.P.Val))) +
geom_histogram(fill='purple', alpha=0.5, position='identity')
df$p_value
P.Value
ggplot(df, aes(x=P.Value)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
names(df)
ggplot(df, aes(x=p_Value, color=cat)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
ggplot(df, aes(x=p_value, color=cat)) +
geom_histogram(fill='red', alpha=0.5, position='identity')
n <- length(top.table2$adj.P.Val)
df <- data.frame(cbind(c(top.table2$P.Value, top.table2$adj.P.Val), c(rep(1, n, 1000), rep(0, n, 1000))))
c(rep(1, n, 1000), rep(0, n, 1000))
install.packages('openssl')
library('openssl')
library('openssl')
library('survey')
library('personalized')
